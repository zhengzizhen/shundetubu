export class AES_GCM {
    static encrypt(cleartext: any, key: any, nonce: any, adata: any, tagsize: any): Uint8Array;
    static decrypt(ciphertext: any, key: any, nonce: any, adata: any, tagsize: any): Uint8Array;
    constructor(key: any, nonce: any, adata: any, tagSize: number | undefined, aes: any);
    tagSize: number;
    gamma0: number;
    counter: number;
    aes: any;
    adata: any;
    encrypt(data: any): Uint8Array;
    decrypt(data: any): Uint8Array;
    AES_GCM_Encrypt_process(data: any): Uint8Array;
    AES_GCM_Encrypt_finish(): Uint8Array;
    AES_GCM_Decrypt_process(data: any): Uint8Array;
    AES_GCM_Decrypt_finish(): Uint8Array;
    AES_GCM_decrypt(data: any): Uint8Array;
    AES_GCM_encrypt(data: any): Uint8Array;
    _gcm_mac_process(data: any): void;
}
export class IllegalArgumentError extends Error {
    constructor(...args: any[]);
}
export class IllegalStateError extends Error {
    constructor(...args: any[]);
}
export class SecurityError extends Error {
    constructor(...args: any[]);
}
export function base64_to_bytes(str: any): Uint8Array;
export function bytes_to_base64(arr: any): string;
export function bytes_to_string(bytes: any, utf8?: boolean): string;
export function string_to_bytes(str: any, utf8?: boolean): Uint8Array;
