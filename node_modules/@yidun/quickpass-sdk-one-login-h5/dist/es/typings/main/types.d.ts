import { POLICY_TARGET } from './constants';
export interface RequestResponse {
    code: number;
    msg: string;
    data: string;
}
export interface PreCheckData {
    appId?: string;
    appKey?: string;
    extData?: Record<string, any>;
    token?: string;
    url?: string;
}
export interface CommonStyles {
    width?: number | `${number}%` | `${number}px`;
    top?: number | `${number}px`;
    align?: 'left' | 'center' | 'right';
}
export interface LogoStyles extends CommonStyles {
    height?: number | `${number}px`;
}
export interface SloganStyles extends CommonStyles {
    color?: string;
    size?: number | `${number}px`;
}
export interface PhoneStyles extends Omit<CommonStyles, 'width'> {
    color?: string;
    size?: number | `${number}px`;
}
export declare type PhoneInputStyle = 'sub' | 'square';
export interface SwitchButtonStyles extends CommonStyles {
    color?: string;
    size?: number | `${number}px`;
}
export declare type PolicyTarget = typeof POLICY_TARGET[keyof typeof POLICY_TARGET];
export interface PolicyDefine {
    url: string;
    content: string;
}
export interface PolicyStyles extends CommonStyles {
    color?: string;
    size?: number | `${number}px`;
}
export interface LoginButtonStyles extends CommonStyles {
    height?: number | `${number}%` | `${number}px`;
    color?: string;
    size?: number | `${number}px`;
    background?: string;
    radius?: number | `${number}px`;
}
export interface ToastStyles extends CommonStyles {
}
export declare type Mode = 'float' | 'popup';
export declare type Element = 'back' | 'logo' | 'slogan' | 'phone' | 'switchButton' | 'policy' | 'loginButton';
export interface CommonOptions {
    mode?: Mode;
    __preview__?: boolean;
    elements?: Element[];
    backText?: string;
    logo?: string;
    logoStyles?: LogoStyles;
    sloganAppName?: string;
    sloganStyles?: SloganStyles;
    phoneStyles?: PhoneStyles;
    phoneInputStyle?: PhoneInputStyle;
    switchBtnText?: string;
    switchBtnStyles?: SwitchButtonStyles;
    policy?: PolicyDefine[];
    policyTarget?: PolicyTarget;
    policyStyles?: PolicyStyles;
    loginBtnText?: string;
    loginBtnStyles?: LoginButtonStyles;
    toastDelay?: number;
    toastShow?: boolean;
    toastStyles?: ToastStyles;
}
export interface Options extends CommonOptions {
    businessId: string;
    popupContainer?: HTMLElement | string;
    iframeStyles?: CSSStyleDeclaration;
    iframePath?: string;
}
export interface IframeOptions extends CommonOptions {
    container: HTMLElement | string;
}
export interface IframeUrlParams {
    token?: string;
    appId?: string;
    traceId?: string;
    version?: string;
    accessToken?: string;
    maskPhone?: string;
    elements?: string;
    toastShow?: string;
    mode?: Mode;
}
export declare type AddPrefix<T extends string, P extends string> = `${P}${T}`;
