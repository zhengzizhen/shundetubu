"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var utils_1 = require("./utils");
var cache_1 = require("./cache");
var Snaker = /** @class */ (function () {
    function Snaker(options) {
        if (!options.pid)
            throw new Error('product id is required!');
        var pid = options.pid, bid = options.bid, url = options.url, random = options.random, limit = options.limit, disabled = options.disabled, version = options.version;
        this.pid = pid;
        this.bid = bid;
        this.random = random || 1;
        this.limit = limit || 5;
        this.disabled = disabled;
        this.version = version || '';
        this.url = url || 'https://da.dun.163.com/sn.gif';
        this.prefix = '__snaker__id';
        this.cache = new cache_1["default"](this.prefix);
        var localCacheInfo = utils_1.getCookie(this.prefix);
        if (localCacheInfo) {
            this.uuid = localCacheInfo;
        }
        else {
            this.uuid = utils_1.uuid();
            utils_1.setCookie(this.prefix, this.uuid, 1000 * 60 * 60 * 24 * 365);
        }
    }
    Snaker.prototype.setUser = function (user) {
        if (typeof user === 'string') {
            this.user = {
                uid: user
            };
        }
        else {
            this.user = { uid: user.uid };
            for (var key in user) {
                if (!user.hasOwnProperty(key)) {
                    continue;
                }
                else {
                    if (key !== 'uid')
                        this.user['$user_' + key] = user[key];
                }
            }
        }
    };
    Snaker.prototype.serialize = function (data, extra) {
        var _a = this, pid = _a.pid, bid = _a.bid, uuid = _a.uuid, user = _a.user, version = _a.version;
        var type = data.type, name = data.name, value = data.value;
        var slice = function (str, len) { return str.substring(0, len); };
        var resolution = screen.width + 'x' + screen.height;
        var pageUrl = slice(location.href, 200);
        var now = new Date().getTime() + '';
        var params = __assign(__assign({ pid: pid,
            bid: bid,
            uuid: uuid,
            type: type,
            name: name,
            version: version,
            value: value, res: resolution, pu: pageUrl, nts: now }, extra), user);
        var query = [];
        for (var key in params) {
            if (!params.hasOwnProperty(key)) {
                continue;
            }
            else {
                if (params[key] !== undefined) {
                    query.push(encodeURIComponent(key + '=') + encodeURIComponent(encodeURIComponent(params[key])));
                }
                else {
                    continue;
                }
            }
        }
        return query.join('%26');
    };
    Snaker.prototype.sendRequest = function (server, data) {
        if (this.disabled)
            return;
        var image = new Image(1, 1);
        image.src = server + '?d=' + data;
    };
    Snaker.prototype.report = function (type, name, value, offline, extra) {
        if (this.disabled)
            return;
        if (this.random < Math.random())
            return;
        var log = this.serialize({ type: type, name: name, value: value }, extra ? extra : {});
        if (offline) {
            this.cache.push(log);
            if (this.cache.length() >= this.limit) {
                this.flush();
            }
        }
        else {
            this.sendRequest(this.url, log);
        }
    };
    Snaker.prototype.track = function (type, name, value, extra) {
        this.report(type, name, value, false, extra);
    };
    Snaker.prototype.trackAsync = function (type, name, value, extra) {
        this.report(type, name, value, true, extra);
    };
    Snaker.prototype.flush = function () {
        var payload = '';
        var logs = this.cache.pop(this.limit);
        while (logs.length) {
            var poped = logs.pop() || '';
            if (!poped)
                continue;
            payload = payload ? payload + ',' + poped : poped;
            if (payload.length > 1800) {
                this.sendRequest(this.url, payload);
                payload = '';
            }
        }
        if (payload) {
            this.sendRequest(this.url, payload);
        }
    };
    return Snaker;
}());
exports["default"] = Snaker;
//# sourceMappingURL=index.js.map