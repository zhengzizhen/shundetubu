/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function getCookie(name) {
    var cookiePattern = new RegExp('(^|;)[ ]*' + name + '=([^;]*)');
    var cookieMatch = cookiePattern.exec(document.cookie);
    return cookieMatch ? decodeURIComponent(cookieMatch[2]) : '';
}
function setCookie(name, value, maxAge) {
    var expiredTime;
    var cookie = name + '=' + encodeURIComponent(value) + ';';
    if (maxAge) {
        expiredTime = new Date();
        expiredTime.setTime(expiredTime.getTime() + maxAge);
        cookie += "expires=" + expiredTime.toUTCString();
    }
    document.cookie = cookie;
}
function uuid() {
    var chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var id = '';
    var i = 0;
    for (var l = chars.length; i < 16; i++) {
        id += chars.charAt(Math.floor(Math.random() * l));
    }
    return id;
}

var userStore = {
    userData: null,
    name: location.hostname + "_snaker",
    init: function () {
        if (!userStore.userData) {
            try {
                userStore.userData = document.createElement('INPUT');
                userStore.userData.type = 'hidden';
                userStore.userData.style.display = 'none';
                userStore.userData.addBehavior('#default#userData');
                userStore.userData && document.body.appendChild(userStore.userData);
                var expires = new Date();
                expires.setDate(expires.getDate() + 365);
                userStore.userData.expires = expires.toUTCString();
            }
            catch (error) {
                console.log('userData is disabled!');
                return false;
            }
        }
        return true;
    },
    setItem: function (key, value) {
        if (userStore.init() && userStore.userData) {
            userStore.userData.load(userStore.name);
            userStore.userData.setAttribute(key, value);
            userStore.userData.save(userStore.name);
        }
    },
    getItem: function (key) {
        if (userStore.init() && userStore.userData) {
            userStore.userData.load(userStore.name);
            return userStore.userData.getAttribute(key) || '';
        }
        return '';
    },
    removeItem: function (key) {
        if (userStore.init() && userStore.userData) {
            userStore.userData.load(userStore.name);
            userStore.userData.removeAttribute(key);
            userStore.userData.save(userStore.name);
        }
    }
};

var localStore;
try {
    localStore = localStorage || userStore;
}
catch (err) {
    localStore = userStore;
}
var History = /** @class */ (function () {
    function History(name) {
        this.name = name;
    }
    History.prototype.push = function (log) {
        if (!log)
            return;
        try {
            var previous = localStore.getItem(this.name);
            localStore.setItem(this.name, previous ? previous + ',' + log : log);
        }
        catch (error) {
            console.log('localstorage or userData is disabled!');
        }
    };
    History.prototype.length = function () {
        try {
            var logs = localStore.getItem(this.name) || '';
            return logs ? logs.split(',').length : 0;
        }
        catch (error) {
            console.log('localstorage or userData is disabled!');
            return 0;
        }
    };
    History.prototype.pop = function (len) {
        if (len === void 0) { len = 1; }
        var poped;
        try {
            var value = localStore.getItem(this.name);
            var logs = value ? value.split(',') : [];
            poped = logs.splice(0, len);
            localStore.setItem(this.name, logs.join(','));
        }
        catch (error) {
            poped = [];
            console.log('localstorage or userData is disabled!');
        }
        return poped;
    };
    History.prototype.clear = function () {
        try {
            localStore.removeItem(this.name);
        }
        catch (error) {
            console.log('localstorage or userData is disabled!');
        }
    };
    return History;
}());

var Snaker = /** @class */ (function () {
    function Snaker(options) {
        if (!options.pid)
            throw new Error('product id is required!');
        var pid = options.pid, bid = options.bid, url = options.url, random = options.random, limit = options.limit, disabled = options.disabled, version = options.version;
        this.pid = pid;
        this.bid = bid;
        this.random = random || 1;
        this.limit = limit || 5;
        this.disabled = disabled;
        this.version = version || '';
        this.url = url || 'https://da.dun.163.com/sn.gif';
        this.prefix = '__snaker__id';
        this.cache = new History(this.prefix);
        var localCacheInfo = getCookie(this.prefix);
        if (localCacheInfo) {
            this.uuid = localCacheInfo;
        }
        else {
            this.uuid = uuid();
            setCookie(this.prefix, this.uuid, 1000 * 60 * 60 * 24 * 365);
        }
    }
    Snaker.prototype.setUser = function (user) {
        if (typeof user === 'string') {
            this.user = {
                uid: user
            };
        }
        else {
            this.user = { uid: user.uid };
            for (var key in user) {
                if (!user.hasOwnProperty(key)) {
                    continue;
                }
                else {
                    if (key !== 'uid')
                        this.user['$user_' + key] = user[key];
                }
            }
        }
    };
    Snaker.prototype.serialize = function (data, extra) {
        var _a = this, pid = _a.pid, bid = _a.bid, uuid$$1 = _a.uuid, user = _a.user, version = _a.version;
        var type = data.type, name = data.name, value = data.value;
        var slice = function (str, len) { return str.substring(0, len); };
        var resolution = screen.width + 'x' + screen.height;
        var pageUrl = slice(location.href, 200);
        var now = new Date().getTime() + '';
        var params = __assign(__assign({ pid: pid,
            bid: bid,
            uuid: uuid$$1,
            type: type,
            name: name,
            version: version,
            value: value, res: resolution, pu: pageUrl, nts: now }, extra), user);
        var query = [];
        for (var key in params) {
            if (!params.hasOwnProperty(key)) {
                continue;
            }
            else {
                if (params[key] !== undefined) {
                    query.push(encodeURIComponent(key + '=') + encodeURIComponent(encodeURIComponent(params[key])));
                }
                else {
                    continue;
                }
            }
        }
        return query.join('%26');
    };
    Snaker.prototype.sendRequest = function (server, data) {
        if (this.disabled)
            return;
        var image = new Image(1, 1);
        image.src = server + '?d=' + data;
    };
    Snaker.prototype.report = function (type, name, value, offline, extra) {
        if (this.disabled)
            return;
        if (this.random < Math.random())
            return;
        var log = this.serialize({ type: type, name: name, value: value }, extra ? extra : {});
        if (offline) {
            this.cache.push(log);
            if (this.cache.length() >= this.limit) {
                this.flush();
            }
        }
        else {
            this.sendRequest(this.url, log);
        }
    };
    Snaker.prototype.track = function (type, name, value, extra) {
        this.report(type, name, value, false, extra);
    };
    Snaker.prototype.trackAsync = function (type, name, value, extra) {
        this.report(type, name, value, true, extra);
    };
    Snaker.prototype.flush = function () {
        var payload = '';
        var logs = this.cache.pop(this.limit);
        while (logs.length) {
            var poped = logs.pop() || '';
            if (!poped)
                continue;
            payload = payload ? payload + ',' + poped : poped;
            if (payload.length > 1800) {
                this.sendRequest(this.url, payload);
                payload = '';
            }
        }
        if (payload) {
            this.sendRequest(this.url, payload);
        }
    };
    return Snaker;
}());

function getElementXPath(el, context) {
    if (context === void 0) { context = document.body; }
    var xpath = '';
    while (el !== null) {
        if (el.id !== '') {
            xpath = "//*[@id=\"" + el.id + "\"]" + xpath;
            break;
        }
        if (el === context) {
            xpath = "/" + el.tagName.toLowerCase() + xpath;
            if (document.body === context) {
                xpath = "/html" + xpath;
            }
            break;
        }
        var siblings = el.parentNode ? el.parentNode.childNodes : [];
        var sameNodeCount = 1;
        var ix = 1;
        var i = 0;
        for (var l = siblings.length; i < l; i++) {
            var sibling = siblings[i];
            if (sibling === el) {
                ix = sameNodeCount;
            }
            else if (sibling.nodeType === 1 && sibling.tagName === el.tagName) {
                sameNodeCount++;
            }
        }
        xpath = "/" + el.tagName.toLowerCase() + (sameNodeCount > 1 ? "[" + ix + "]" : '') + xpath;
        el = el.parentNode;
    }
    return xpath;
}
/**
 * 计算点击事件触发的 dom 在组件维度的 path
 * 最终得到如：/Root/App/Layout/ASpin/Dashboard
 * @param el Element
 */
function getElementVPath(el) {
    var vpath = '';
    while (el != null && el.__vue__ == null) {
        el = el.parentNode;
    }
    if (el) {
        var vm = el.__vue__;
        while (vm !== null && vm !== undefined) {
            // 匿名组件命名为 Anonymous
            var parent_1 = vm.$parent;
            var name_1 = vm.$options.name || (parent_1 && parent_1.$parent ? 'Anonymous' : 'Root');
            var children = parent_1 ? parent_1.$children || [] : [];
            var ix = 1;
            var sameNodeCount = 1;
            for (var i = 0; i < children.length; i++) {
                if (vm === children[i]) {
                    ix = sameNodeCount;
                }
                else if (children[i].constructor === vm.constructor) {
                    sameNodeCount++;
                }
            }
            vpath = "/" + name_1 + (sameNodeCount > 1 ? "[" + ix + "]" : '') + vpath;
            vm = parent_1;
        }
    }
    return vpath;
}

function createWebClick(snaker, genExtraData) {
    function handleClick(ev) {
        var el = ev.target;
        var xpath = getElementXPath(el);
        var extraData = {};
        if (genExtraData !== undefined) {
            Object.assign(extraData, genExtraData(ev));
        }
        snaker.trackAsync('webClick', location.pathname, xpath, extraData);
    }
    function start() {
        document.addEventListener('click', handleClick);
    }
    return {
        start: start
    };
}

var vue = {
    install: function (Vue, pluginOptions) {
        var router = pluginOptions.router, _a = pluginOptions.webClick, webClick = _a === void 0 ? false : _a, options = __rest(pluginOptions, ["router", "webClick"]);
        var snaker = new Snaker(options);
        var report = {
            binding: function (event) { },
            add: function (el, value) {
                this.binding = function () {
                    snaker.trackAsync('event', 'click', value);
                };
                el.addEventListener('click', this.binding);
            },
            remove: function (el) {
                el.removeEventListener('click', this.binding);
            }
        };
        Vue.directive('sk', {
            bind: function (el, binding) {
                report.add(el, binding.value);
            },
            unbind: function (el) {
                report.remove(el);
            }
        });
        Vue.prototype.$snaker = snaker;
        if (router) {
            router.afterEach(function (to, from) {
                snaker.trackAsync('pageView', to.path, from.path);
            });
        }
        if (webClick) {
            var instance = createWebClick(snaker, function (ev) {
                var el = ev.target;
                var vpath = getElementVPath(el);
                return {
                    vpath: vpath
                };
            });
            instance.start();
        }
    }
};

export default vue;
//# sourceMappingURL=snaker.vue.es5.js.map
